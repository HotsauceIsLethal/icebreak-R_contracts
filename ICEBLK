const hive = require('@hiveio/dhive');
const client = new hive.Client(process.env.HIVE_POSTING_KEY);

const TRIBALDEX_ACCOUNT = 'tribaldex';
const TRIBALDEX_SYMBOL = 'ICEBLK';
const ICEBLK_DURATION = 72 * 60 * 60 * 1000; // 72 hours in milliseconds
const BRK_PRICE = 100; // 1 ICEBLK token = 100 SWAP.HIVE worth of BRK tokens

// Function to handle incoming transfers to the "@ICEBLK" account
async function handleIncomingTransfer(operation) {
  const { from, amount, memo } = operation;

  // Check that the transfer is for ICEBLK tokens
  if (amount.symbol !== TRIBALDEX_SYMBOL) {
    return;
  }

  // Check that the memo contains the word "purchase"
  if (!memo.toLowerCase().includes('purchase')) {
    return;
  }

  // Calculate the amount of ICEBLK tokens purchased
  const iceblkAmount = parseFloat(amount.amount);

  // Calculate the amount of BRK tokens to send to the user
  const brkAmount = iceblkAmount * BRK_PRICE;

  // Send the BRK tokens to the user's wallet
  const transfer = {
    from: TRIBALDEX_ACCOUNT,
    to: from,
    amount: `${brkAmount.toFixed(3)} BRK`,
    memo: 'Thank you for purchasing ICEBLK tokens on Tribaldex!'
  };
  await client.broadcast.transfer(transfer, [process.env.HIVE_POSTING_KEY]);

  // Schedule the ICEBLK tokens to "melt" in 72 hours
  setTimeout(() => {
    redeemICEBLK(from, iceblkAmount);
  }, ICEBLK_DURATION);
}

// Function to redeem ICEBLK tokens for BRK tokens
async function redeemICEBLK(from, iceblkAmount) {
  // Calculate the amount of BRK tokens to send to the user
  const brkAmount = iceblkAmount * BRK_PRICE;

  // Send the ICEBLK tokens to the null account
  const transfer = {
    from: from,
    to: 'null',
    amount: `${iceblkAmount.toFixed(3)} ${TRIBALDEX_SYMBOL}`,
    memo: 'Thank you for redeeming your ICEBLK tokens!'
  };
  await client.broadcast.transfer(transfer, [process.env.HIVE_POSTING_KEY]);

  // Send the BRK tokens to the "@ICEBRK" account
  const memo = `Redeemed ${iceblkAmount.toFixed(3)} ICEBLK tokens for ${brkAmount.toFixed(3)} BRK tokens`;
  const customJson = {
    id: 'icebrk_redeem',
    required_auths: [],
    required_posting_auths: [process.env.HIVE_POSTING_KEY],
    json: JSON.stringify({ from, brkAmount, memo })
  };
  await client.broadcast.json(customJson, [process.env.HIVE_POSTING_KEY]);
}

// Function to start listening for incoming transfers to the "@ICEBLK" account
function startListening() {
  const stream = client.blockchain.getOperationsStream({ accounts: ['@ICEBLK'] });
  stream.on('data', async (block, transaction, operation) => {
    if (operation.type === 'transfer' && operation.to === '@ICEBLK') {
      await handleIncomingTransfer(operation);
    }
  });
}

startListening();
